/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.activity.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TemperatureConversion extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6575475989392577957L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemperatureConversion\",\"namespace\":\"com.activity.dto\",\"fields\":[{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"fromUnit\",\"type\":\"string\"},{\"name\":\"toUnit\",\"type\":\"string\"},{\"name\":\"result\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TemperatureConversion> ENCODER =
      new BinaryMessageEncoder<TemperatureConversion>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TemperatureConversion> DECODER =
      new BinaryMessageDecoder<TemperatureConversion>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TemperatureConversion> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TemperatureConversion> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TemperatureConversion>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TemperatureConversion to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TemperatureConversion from a ByteBuffer. */
  public static TemperatureConversion fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double value;
  @Deprecated public java.lang.CharSequence fromUnit;
  @Deprecated public java.lang.CharSequence toUnit;
  @Deprecated public java.lang.Double result;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemperatureConversion() {}

  /**
   * All-args constructor.
   * @param value The new value for value
   * @param fromUnit The new value for fromUnit
   * @param toUnit The new value for toUnit
   * @param result The new value for result
   */
  public TemperatureConversion(java.lang.Double value, java.lang.CharSequence fromUnit, java.lang.CharSequence toUnit, java.lang.Double result) {
    this.value = value;
    this.fromUnit = fromUnit;
    this.toUnit = toUnit;
    this.result = result;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    case 1: return fromUnit;
    case 2: return toUnit;
    case 3: return result;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.lang.Double)value$; break;
    case 1: fromUnit = (java.lang.CharSequence)value$; break;
    case 2: toUnit = (java.lang.CharSequence)value$; break;
    case 3: result = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'fromUnit' field.
   * @return The value of the 'fromUnit' field.
   */
  public java.lang.CharSequence getFromUnit() {
    return fromUnit;
  }

  /**
   * Sets the value of the 'fromUnit' field.
   * @param value the value to set.
   */
  public void setFromUnit(java.lang.CharSequence value) {
    this.fromUnit = value;
  }

  /**
   * Gets the value of the 'toUnit' field.
   * @return The value of the 'toUnit' field.
   */
  public java.lang.CharSequence getToUnit() {
    return toUnit;
  }

  /**
   * Sets the value of the 'toUnit' field.
   * @param value the value to set.
   */
  public void setToUnit(java.lang.CharSequence value) {
    this.toUnit = value;
  }

  /**
   * Gets the value of the 'result' field.
   * @return The value of the 'result' field.
   */
  public java.lang.Double getResult() {
    return result;
  }

  /**
   * Sets the value of the 'result' field.
   * @param value the value to set.
   */
  public void setResult(java.lang.Double value) {
    this.result = value;
  }

  /**
   * Creates a new TemperatureConversion RecordBuilder.
   * @return A new TemperatureConversion RecordBuilder
   */
  public static com.activity.dto.TemperatureConversion.Builder newBuilder() {
    return new com.activity.dto.TemperatureConversion.Builder();
  }

  /**
   * Creates a new TemperatureConversion RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemperatureConversion RecordBuilder
   */
  public static com.activity.dto.TemperatureConversion.Builder newBuilder(com.activity.dto.TemperatureConversion.Builder other) {
    return new com.activity.dto.TemperatureConversion.Builder(other);
  }

  /**
   * Creates a new TemperatureConversion RecordBuilder by copying an existing TemperatureConversion instance.
   * @param other The existing instance to copy.
   * @return A new TemperatureConversion RecordBuilder
   */
  public static com.activity.dto.TemperatureConversion.Builder newBuilder(com.activity.dto.TemperatureConversion other) {
    return new com.activity.dto.TemperatureConversion.Builder(other);
  }

  /**
   * RecordBuilder for TemperatureConversion instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemperatureConversion>
    implements org.apache.avro.data.RecordBuilder<TemperatureConversion> {

    private double value;
    private java.lang.CharSequence fromUnit;
    private java.lang.CharSequence toUnit;
    private java.lang.Double result;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.activity.dto.TemperatureConversion.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromUnit)) {
        this.fromUnit = data().deepCopy(fields()[1].schema(), other.fromUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toUnit)) {
        this.toUnit = data().deepCopy(fields()[2].schema(), other.toUnit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.result)) {
        this.result = data().deepCopy(fields()[3].schema(), other.result);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TemperatureConversion instance
     * @param other The existing instance to copy.
     */
    private Builder(com.activity.dto.TemperatureConversion other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromUnit)) {
        this.fromUnit = data().deepCopy(fields()[1].schema(), other.fromUnit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toUnit)) {
        this.toUnit = data().deepCopy(fields()[2].schema(), other.toUnit);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.result)) {
        this.result = data().deepCopy(fields()[3].schema(), other.result);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Double getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder setValue(double value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder clearValue() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromUnit' field.
      * @return The value.
      */
    public java.lang.CharSequence getFromUnit() {
      return fromUnit;
    }

    /**
      * Sets the value of the 'fromUnit' field.
      * @param value The value of 'fromUnit'.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder setFromUnit(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fromUnit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromUnit' field has been set.
      * @return True if the 'fromUnit' field has been set, false otherwise.
      */
    public boolean hasFromUnit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fromUnit' field.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder clearFromUnit() {
      fromUnit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toUnit' field.
      * @return The value.
      */
    public java.lang.CharSequence getToUnit() {
      return toUnit;
    }

    /**
      * Sets the value of the 'toUnit' field.
      * @param value The value of 'toUnit'.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder setToUnit(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.toUnit = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toUnit' field has been set.
      * @return True if the 'toUnit' field has been set, false otherwise.
      */
    public boolean hasToUnit() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'toUnit' field.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder clearToUnit() {
      toUnit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * @return The value.
      */
    public java.lang.Double getResult() {
      return result;
    }

    /**
      * Sets the value of the 'result' field.
      * @param value The value of 'result'.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder setResult(java.lang.Double value) {
      validate(fields()[3], value);
      this.result = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'result' field.
      * @return This builder.
      */
    public com.activity.dto.TemperatureConversion.Builder clearResult() {
      result = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TemperatureConversion build() {
      try {
        TemperatureConversion record = new TemperatureConversion();
        record.value = fieldSetFlags()[0] ? this.value : (java.lang.Double) defaultValue(fields()[0]);
        record.fromUnit = fieldSetFlags()[1] ? this.fromUnit : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.toUnit = fieldSetFlags()[2] ? this.toUnit : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.result = fieldSetFlags()[3] ? this.result : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TemperatureConversion>
    WRITER$ = (org.apache.avro.io.DatumWriter<TemperatureConversion>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TemperatureConversion>
    READER$ = (org.apache.avro.io.DatumReader<TemperatureConversion>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
